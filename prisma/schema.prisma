generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
enum UserRoles {
  ADMIN
  RM
  STAFF
  MARKETING
}

enum LeadEventType {
  REVISIT
  NOTE
  INTERACTION
  STATUS_CHANGE
  ASSIGNMENT
  PHONE_ADDED
  PHONE_REMOVED
  PHONE_MARKED_PRIMARY
  REMARK_UPDATED
  BIO_UPDATED
  HISTORY_SNAPSHOT
}

enum InteractionChannel {
  CALL
  WHATSAPP
  SMS
  EMAIL
  MEETING
  OTHER
}

enum InteractionOutcome {
  NO_ANSWER
  ANSWERED
  INTERESTED
  NOT_INTERESTED
  FOLLOW_UP_NEEDED
  WRONG_NUMBER
}

enum DormantReason {
  NO_RESPONSE
  NOT_INTERESTED
  RISKY_CLIENT
  OTHER
}

model LeadEvent {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  leadId     String      @db.ObjectId
  lead       IpkLeadd    @relation(fields: [leadId], references: [id])

  authorId   String?     @db.ObjectId
  author     User?       @relation("LeadEventAuthor", fields: [authorId], references: [id])

  type       LeadEventType
  occurredAt DateTime    @default(now())

  // free text & tags
  text       String?
  tags       String[]

  // change snapshots (STATUS_CHANGE, BIO_UPDATED, etc.)
  prev       Json?
  next       Json?

  // structured meta (channel/outcome/followup)
  meta       Json?

  @@index([leadId, occurredAt])
  @@map("lead_event")
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Profession {
  SELF_EMPLOYED
  BUSINESS
  EMPLOYEE
}

enum Product {
  IAP
  SIP
}


enum LeadStatus {
  PENDING
  ASSIGNED
  ON_HOLD
  CLOSED
  OPEN
}

enum ClientStage {
  FIRST_TALK_DONE
  FOLLOWING_UP
  CLIENT_INTERESTED
  ACCOUNT_OPENED
  NO_RESPONSE_DORMANT
  NOT_INTERESTED_DORMANT
  RISKY_CLIENT_DORMANT
  HIBERNATED
}

model Counter {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  key     String @unique            // e.g. "lead_seq_2509"
  current Int    @default(0)
  @@map("counter")
}

model AssignmentMeta {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique              // e.g. "RM_ROUND_ROBIN"
  value Int    @default(0)
  @@map("assignment_meta")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  archived  Boolean   @default(false)
  name      String
  email     String   @unique
  role      UserRoles
  firebaseUid String?   @unique
  passwordHash String?
  gender    Gender?
  phone     String?
  status    Status     @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Optional: diagnostics if you keep it
  lastAssignedAt DateTime?

  // relation
  assignedLeads IpkLeadd[] @relation("UserAssignedRm")
  authoredLeadEvents LeadEvent[] @relation("LeadEventAuthor")

  @@index([role, status, archived])
  @@index([createdAt])
  @@map("user")
}

model IpkLeadd {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId

  firstName String?
  lastName  String?
  name      String?
  email     String?
  phone     String
  phoneNormalized String?
  phones    LeadPhone[]

  leadCode  String?   // partial unique in DB (create outside Prisma if you prefer)

  gender    Gender?
  age       Int?
  location  String?

  referralCode String?
  leadSource   String

  profession      Profession?
  companyName     String?
  designation     String?
  product         Product?
  investmentRange String?
  sipAmount       Int?
  clientTypes     String?

  remark    String?
  bioText   String?

  assignedRmId String? @db.ObjectId
  assignedRm   User?   @relation("UserAssignedRm", fields: [assignedRmId], references: [id])
  assignedRM   String? // denormalized display name

  status    LeadStatus @default(PENDING)
  clientStage ClientStage?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  archived  Boolean    @default(false)

  revisitCount  Int        @default(0)
  firstSeenAt   DateTime   @default(now())
  lastSeenAt    DateTime?
  reenterCount  Int        @default(0)
  approachAt    DateTime?
  clientQa      Json?

  events        LeadEvent[]

  @@index([leadSource])
  @@index([assignedRmId])
  @@index([createdAt])
  @@index([status])
  @@map("ipk_leadd")
}

enum PhoneLabel {
  PRIMARY
  MOBILE
  WHATSAPP
  WORK
  HOME
  OTHER
}

model LeadPhone {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  leadId     String     @db.ObjectId
  lead       IpkLeadd   @relation(fields: [leadId], references: [id])

  label      PhoneLabel @default(MOBILE)
  number     String
  normalized String
  isPrimary  Boolean    @default(false)
  isWhatsapp Boolean    @default(false)
  verifiedAt DateTime?

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([leadId, normalized], map: "uniq_leadphone_lead_norm")
  @@map("lead_phone")
}
